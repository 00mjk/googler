#!/usr/bin/python
#
# Copyright (C) 2008 Henri Hakkinen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import webbrowser
import termios
import HTMLParser

from urllib import quote_plus
from httplib import HTTPConnection
from getopt import getopt, GetoptError

# Global variables
start    = None    # The first result to display (option -s)
num      = None    # Number of results to display (option -n)
lang     = None    # Language to search for (option -l)
openUrl  = False   # If True, opens the first URL in browser (option -o)
colorize = False   # If True, colorizes the output (option -C)

# Classes
class GoogleParser(HTMLParser.HTMLParser):
    def __init__(self):
        HTMLParser.HTMLParser.__init__(self)
        self.handle_starttag = self.main_start
        self.handle_data = self.main_data
        self.handle_endtag = self.main_end
    def main_start(self, tag, attrs):
        if tag == "li" and len(attrs) > 0 and attrs[0] == ("class", "g"):
            self.url = ""
            self.title = ""
            self.text = ""
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end
    def main_data(self, data):
        pass
    def main_end(self, tag):
        pass
    def li_start(self, tag, attrs):
        if tag == "h3":
            self.handle_starttag = self.h3_start
            self.handle_data = self.h3_data
            self.handle_endtag = self.h3_end
        elif tag == "div":
            self.handle_starttag = self.div_start
            self.handle_data = self.div_data
            self.handle_endtag = self.div_end
    def li_data(self, data):
        pass
    def li_end(self, tag):
        if tag == "div":
            print_entry(self.title, self.url, self.text)
            self.handle_starttag = self.main_start
            self.handle_data = self.main_data
            self.handle_endtag = self.main_end
    def h3_start(self, tag, attrs):
        if tag == "a":
            self.url = attrs[0][1]
    def h3_data(self, data):
        self.title += data
    def h3_end(self, tag):
        if tag == "h3": 
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end
    def div_start(self, tag, start):
        if tag == "br":
            self.handle_starttag = self.li_start
            self.handle_data = self.li_data
            self.handle_endtag = self.li_end
    def div_data(self, data):
        self.text += data
    def div_end(self, tag):
        pass

# Functions
def print_entry(title, url, text):
    if openUrl == True:
        webbrowser.open(url)
        sys.exit(0)
    if colorize:
        print "\x1B[96m* \x1B[92m%s \x1B[93m(%s)\n\x1B[39m%s\n" % (title, url, text)
    else:
        print "* %s (%s)\n%s\n" % (title, url, text)

def usage():
    print "Usage: google [OPTIONS] KEYWORDS..."
    print "Performs a Google search and prints the results to stdout."
    print
    print "Options"
    print "  -s N     start at result N"
    print "  -n N     shows the first N results"
    print "  -l LANG  search for language LANG, such as fi for Finnish"
    print "  -C       colorize the output"
    print "  -o       open the first result in web browser"
    print
    print "Copyright (C) 2008 Henri Hakkinen"
    print "Report bugs to <henux@users.sourceforge.net>."
    sys.exit(1)

########### Program Main

# Process command line options.
optlist = None
keywords = None

if len(sys.argv) < 2:
    usage()

try:
    optlist, keywords = getopt(sys.argv[1:], "s:n:l:Co")
except GetoptError, e:
    print "google:", e
    sys.exit(1)

for opt in optlist:
    if opt[0] == "-s":
        # Option -s N
        if not opt[1].isdigit():
            print "google: option -s needs an integer"
            sys.exit(1)
        start = opt[1]
    elif opt[0] == "-n":
        # Option -n N
        if not opt[1].isdigit():
            print "google: option -n needs an integer"
            sys.exit(1)
        num = opt[1]
    elif opt[0] == "-l":
        # Option -l LANG
        lang = opt[1]
    elif opt[0] == "-C":
        # Option -C
        colorize = True
    elif opt[0] == "-o":
        # Option -o
        openUrl = True

if len(keywords) < 1:
    usage()

# Construct the query URL.
url = "/search?"

if start != None:
    url += "start=" + start + "&"
if num != None:
    url += "num=" + num + "&"
if lang != None:
    url += "hl=" + lang + "&"

url += "q=" + quote_plus(keywords[0])
for kw in keywords[1:]:
    url += "+" + quote_plus(kw)

if colorize:
    print "\x1B[96m"
print "http://www.google.com%s" % url
print

# Connect to Google and request the result page.
conn = HTTPConnection("www.google.com")
conn.request("GET", url)
resp = conn.getresponse()
if resp.status != 200:
    # The server responded with an error.
    print "The server responded with an error:", str(resp.status)
    sys.exit(1)

# Parse the HTML document and print the results.
parser = GoogleParser()
parser.feed(resp.read())
conn.close()
